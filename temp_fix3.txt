  @override
  Widget build(BuildContext context) {
    final Size size = MediaQuery.of(context).size;
    _updateGridColumnsBasedOnScreenSize();
    
    // Calculate available height for the grid
    final appBarHeight = AppBar().preferredSize.height;
    final paginationControlsHeight = _totalPages > 1 ? 60.0 : 0.0;
    final bottomNavHeight = ResponsiveHelper.isMobile(context) ? 56.0 : 0.0;
    final safeAreaPadding = MediaQuery.of(context).padding;
    
    // Calculate available height for the grid
    final availableHeight = size.height - appBarHeight - paginationControlsHeight - bottomNavHeight - safeAreaPadding.top - safeAreaPadding.bottom;
    
    // Filter out null cameras and create a list of only active cameras
    final activeCameras = _selectedCameras.where((cam) => cam != null).toList();
    final activeCameraCount = activeCameras.length;
    
    // Calculate how many actual rows we need for the active cameras
    // This ensures we don't reserve space for empty slots
    final activeRowsNeeded = (activeCameraCount / _gridColumns).ceil();
    
    // Calculate optimal aspect ratio based on the available height and active rows
    final double cellWidth = size.width / _gridColumns;
    final double cellHeight = (availableHeight) / activeRowsNeeded;
    final double aspectRatio = cellWidth / cellHeight;
    
    return Scaffold(
      appBar: AppBar(
        title: const Text('Multi Camera View'),
        actions: [
          // Grid layout selector
          PopupMenuButton<int>(
            tooltip: 'Change grid layout',
            icon: const Icon(Icons.grid_view),
            onSelected: _changeGridLayout,
            itemBuilder: (context) => [
              const PopupMenuItem(
                value: 1,
                child: Text('1 column'),
              ),
              const PopupMenuItem(
                value: 2,
                child: Text('2 columns'),
              ),
              const PopupMenuItem(
                value: 3,
                child: Text('3 columns'),
              ),
              const PopupMenuItem(
                value: 4,
                child: Text('4 columns'),
              ),
              const PopupMenuItem(
                value: 5,
                child: Text('5 columns'),
              ),
            ],
          ),
          
          const SizedBox(width: 8),
        ],
      ),
      body: Column(
        children: [
          // Main grid taking all available space
          Container(
            width: size.width,
            height: availableHeight,
            child: GridView.builder(
              padding: EdgeInsets.zero,
              physics: const NeverScrollableScrollPhysics(),
              shrinkWrap: true,
              gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: _gridColumns,
                childAspectRatio: aspectRatio,
                crossAxisSpacing: 0,
                mainAxisSpacing: 0,
              ),
              itemCount: activeCameraCount,
              itemBuilder: (context, index) {
